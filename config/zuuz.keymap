// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>


#define LAYER_BASE 0
#define LAYER_BASE_BSPC 1
#define LAYER_NAV 2
#define LAYER_SYM 3
#define LAYER_NOOP 4
#define LAYER_SYS 5
#define LAYER_NUM 6
#define LAYER_FN 7
#define LAYER_KMOUSE 8
#define LAYER_SWITCHES 9


// Home row mods macro
#define HRML(k1,k2,k3,k4) &homey_lt LAYER_NUM k1  &homey_lt LAYER_SYM k2   &shift_left LSHFT k3  &shift_left LSHFT k4
#define HRMR(k1,k2,k3,k4) &shift_right RSHFT k1  &shift_right RSHFT k2  &homey_rt LAYER_SYM k3  &homey_rt LAYER_NUM k4

&mmv {
  acceleration-exponent = <1>;      // 1
  time-to-max-speed-ms = <1500>;    // 40
  delay-ms = <0>;                   // 0
};

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 50 // 10

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

#define U_MOUSE_MOVE_MAX 1250       // 600
#define U_MOUSE_SCROLL_MAX 10      // 10

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_X(U_MOUSE_MOVE_MAX)

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCRL_Y(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCRL_Y(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCRL_X(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCRL_X(U_MOUSE_SCROLL_MAX)


/ {
    behaviors {
        /omit-if-no-ref/ mmv_fast: mmv_fast {
            compatible = "zmk,behavior-input-two-axis";
            #binding-cells = <1>;
            x-input-code = <INPUT_REL_X>;
            y-input-code = <INPUT_REL_Y>;
            time-to-max-speed-ms = <50>;
            acceleration-exponent = <10>;
        };
		
		mmv_input_listener {
			compatible = "zmk,input-listener";
			device = <&mmv_fast>;
		};

		ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
	
        rot_msc: sensor_rotate_msc {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;
			tap-ms = <50>;
			
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
            tap-ms = <50>;
        };

		
        etch_a_sketch_encoder: etch_a_sketch_encoder {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&mmv_fast>, <&mmv_fast>;
            tap-ms = <50>;
        };

		//////////////////////////////////////////////////////////////////////////
		//
		// Miryoku layers and home row mods (ported from my QMK endgame)
		// - https://sunaku.github.io/home-row-mods.html#porting-to-zmk+*ffp
		// - https://github.com/urob/zmk-config#timeless-homerow-mods
		//
		//////////////////////////////////////////////////////////////////////////

		//
		// HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
		// for the pinky, ring, and middle fingers (which are assigned to Super,
		// Alt, and Ctrl respectively in the Miryoku system) on home row keys.
		//
		#ifndef HOMEY_HOLDING_TYPE
		#define HOMEY_HOLDING_TYPE "balanced"
		#endif

		//
		// HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
		// home row mod keys in order to send their modifiers to the computer
		// (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
		//
		#ifndef HOMEY_HOLDING_TIME
		#define HOMEY_HOLDING_TIME 500
		#endif

		//
		// HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
		// after typing before you can use home row mods again.  It prevents
		// unintended activation of home row mods when you're actively typing.
		//
		#ifndef HOMEY_STREAK_DECAY
		#define HOMEY_STREAK_DECAY 170 // global-quick-tap-ms
		#endif

		//
		// HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
		// after tapping a key to hold it again in order to make it auto-repeat.
		//
		#ifndef HOMEY_REPEAT_DECAY
		#define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
		#endif

		//
		// SHIFT_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
		// for index fingers (which Miryoku assigns to Shift) on home row keys.
		//
		// NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
		// allows faster activation of the Shift modifier (without having to wait
		// for the modified key to be released as the "balanced" flavor requires).
		// Typing streaks and the `hold-trigger-on-release` setting are disabled
		// for the index fingers so as not to hinder their speed and dexterity.
		//
		#ifndef SHIFT_HOLDING_TYPE
		#define SHIFT_HOLDING_TYPE "balanced"
		#endif

		//
		// SHIFT_HOLDING_TIME defines how long you need to hold (milliseconds)
		// index finger keys in order to send their modifiers to the computer
		// (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
		//
		// CAUTION: You'll need to perform inward rolls from pinky->ring->middle
		// fingers toward the index fingers when activating multiple modifiers
		// because `hold-trigger-on-release` is disabled for the index fingers.
		// Otherwise, you may be surprised that the index fingers' modifier is
		// sent immediately without the rest of your multi-mod chord when you
		// perform outward rolls from your index fingers toward your pinkies.
		//
		#ifndef SHIFT_HOLDING_TIME
		#define SHIFT_HOLDING_TIME 170
		#endif

		//
		// SHIFT_STREAK_DECAY defines how long you need to wait (milliseconds)
		// after typing before you can use home row mods again.  It prevents
		// unintended activation of home row mods when you're actively typing.
		//
		#ifndef SHIFT_STREAK_DECAY
		#define SHIFT_STREAK_DECAY 70 // global-quick-tap-ms
		#endif

		//
		// SHIFT_REPEAT_DECAY defines how much time you have left (milliseconds)
		// after tapping a key to hold it again in order to make it auto-repeat.
		//
		#ifndef SHIFT_REPEAT_DECAY
		#define SHIFT_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
		#endif

		//
		// THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
		// for the thumbs (which are assigned to 6 layers in the Miryoku system).
		//
		// NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
		// activation for the symbol layer (if the tapped symbol key is released
		// while the thumb layer key is still held down) for quicker programming.
		//
		#ifndef THUMB_HOLDING_TYPE
		#define THUMB_HOLDING_TYPE "balanced"
		#endif

		//
		// THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
		// a thumb key to activate a layer.  Shorter holds are treated as taps.
		//
		#ifndef THUMB_HOLDING_TIME
		#define THUMB_HOLDING_TIME 5000
		#endif

		//
		// THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
		// after tapping a key to hold it again in order to make it auto-repeat.
		//
		#ifndef THUMB_REPEAT_DECAY
		#define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
		#endif

		//
		// SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
		// the space thumb key to activate.  Shorter holds are treated as taps.
		//
		#ifndef SPACE_HOLDING_TIME
		#define SPACE_HOLDING_TIME 170
		#endif

		//
		// SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
		// after tapping a key to hold it again in order to make it auto-repeat.
		//
		#ifndef SPACE_REPEAT_DECAY
		#define SPACE_REPEAT_DECAY 200 // "tap then hold" for key auto-repeat
		#endif

		//
		// Ferris sweep key positions index for positional hold-tap
		//
		// |------------------------|------------------------|
		// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
		// |                        |                        |
		// |  0  1  2  3  4         |          5  6  7  8  9 |
		// | 10 11 12 13 14         |         15 16 17 18 19 |
		// | 20 21 22 23 24         |      25 26 27 28 29 30 |
		// |	        31 32 33    |  34 35 36              |
		// |------------------------|------------------------|
		//
		#define LEFT_HAND_KEYS  \
			  0  1  2  3  4     \
			 10 11 12 13 14     \
			 20 21 22 23 24

		#define RIGHT_HAND_KEYS     \
										5  6  7  8  9 \
									   15 16 17 18 19 \
									   25 26 27 28 29 30
		#define THUMB_KEYS          \
							31 32 33   34 35 36  

		//
		// Home row mod-tap keys for all except index fingers
		//
		homey_left: homey_left {
			compatible = "zmk,behavior-hold-tap";
			flavor = HOMEY_HOLDING_TYPE;
			hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
			//hold-trigger-on-release; // wait for other home row mods
			tapping-term-ms = <HOMEY_HOLDING_TIME>;
			quick-tap-ms = <HOMEY_REPEAT_DECAY>;
			require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;
		};
		homey_right: homey_right {
			compatible = "zmk,behavior-hold-tap";
			flavor = HOMEY_HOLDING_TYPE;
			hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
			//hold-trigger-on-release; // wait for other home row mods
			tapping-term-ms = <HOMEY_HOLDING_TIME>;
			quick-tap-ms = <HOMEY_REPEAT_DECAY>;
			require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;
		};
 
        //
		// Special home row mod-tap keys for the index fingers
		
		shift_left: shift_left {
			compatible = "zmk,behavior-hold-tap";
			flavor = SHIFT_HOLDING_TYPE;
			hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
			//hold-trigger-on-release; // don't wait for other mods
			tapping-term-ms = <SHIFT_HOLDING_TIME>;
			//quick-tap-ms = <SHIFT_REPEAT_DECAY>;
			//require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;
		};
		
		shift_right: shift_right {
			compatible = "zmk,behavior-hold-tap";
			flavor = SHIFT_HOLDING_TYPE;
			hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
			//hold-trigger-on-release; // don't wait for other mods
			tapping-term-ms = <SHIFT_HOLDING_TIME>;
			//quick-tap-ms = <SHIFT_REPEAT_DECAY>;
			//require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;
		}; 
		
		homey_lt: homey_lt {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEY_LT";
			flavor = SHIFT_HOLDING_TYPE;
			hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
			//hold-trigger-on-release; // don't wait for other mods
			tapping-term-ms = <HOMEY_HOLDING_TIME>;
			//quick-tap-ms = <SHIFT_REPEAT_DECAY>;
			//require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&mo>, <&kp>;
		};
	    homey_rt: homey_rt {
			compatible = "zmk,behavior-hold-tap";
			flavor = SHIFT_HOLDING_TYPE;
			hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
			//hold-trigger-on-release; // don't wait for other mods
			tapping-term-ms = <HOMEY_HOLDING_TIME>;
			//quick-tap-ms = <SHIFT_REPEAT_DECAY>;
			//require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&mo>, <&kp>;
		};
	    homey_rt_tap: homey_rt_tap {
			compatible = "zmk,behavior-hold-tap";
			flavor = "tap-preferred";
			hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
			//hold-trigger-on-release; // don't wait for other mods
			tapping-term-ms = <HOMEY_HOLDING_TIME>;
			//quick-tap-ms = <SHIFT_REPEAT_DECAY>;
			//require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&mo>, <&kp>;
		};

		//
		// Thumb cluster hold-tap keys for Miryoku layers
		//
		thumb: miryoku_thumb_layer {
			compatible = "zmk,behavior-hold-tap";
			label = "MIRYOKU_THUMB_LAYER";
			flavor = THUMB_HOLDING_TYPE;
			tapping-term-ms = <THUMB_HOLDING_TIME>;
			quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
			//global-quick-tap; // no typing streak
			//retro-tap; // don't allow slow (hold-like) taps
			#binding-cells = <2>;
			bindings = <&mo>, <&kp>;
		};
		backspace: miryoku_backspace_layer {
			compatible = "zmk,behavior-hold-tap";
			label = "MIRYOKU_BACKSPACE_LAYER";
			flavor = "hold-preferred";
			tapping-term-ms = <THUMB_HOLDING_TIME>;
			quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
			//global-quick-tap; // no typing streak
			//retro-tap; // don't allow slow (hold-like) taps
			#binding-cells = <2>;
			bindings = <&mo>, <&kp>;
		};
		space: miryoku_thumb_layer_spacebar {
			compatible = "zmk,behavior-hold-tap";
			label = "MIRYOKU_THUMB_LAYER_SPACEBAR";
			flavor = THUMB_HOLDING_TYPE;
			tapping-term-ms = <SPACE_HOLDING_TIME>;
			quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
			//global-quick-tap; // no typing streak
			retro-tap; // allow slow (hold-like) taps
			#binding-cells = <2>;
			bindings = <&mo>, <&kp>;
		};

		//////////////////////////////////////////////////////////////////////////
		//
		// Custom shifted pairs
		//
		//////////////////////////////////////////////////////////////////////////

		//
		// Shift + CapsWord = CapsLock
		//
		cappy: capsword_and_capslock {
			compatible = "zmk,behavior-mod-morph";
			label = "CAPSWORD_AND_CAPSLOCK";
			#binding-cells = <0>;
			bindings = <&caps_word>, <&kp CAPSLOCK>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mm_you: mm_you {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mlc_you>, <&muc_you>;
            mods = <(MOD_LSFT)>;
        };

		lmt: layer_momentary_to {
			compatible = "zmk,behavior-hold-tap";
			tapping-term-ms = <THUMB_HOLDING_TIME>;
			flavor = THUMB_HOLDING_TYPE;
			#binding-cells = <2>;
			bindings = <&mo>, <&to>;
		};

		//////////////////////////////////////////////////////////////////////////
		//
		// ZMK global overrides
		//
		//////////////////////////////////////////////////////////////////////////

		//
		// CapsWord - ported from Pascal Getreuer's extension for QMK
		// - https://zmk.dev/docs/behaviors/caps-word
		// - https://getreuer.info/posts/keyboards/caps-word/index.html
		//
		behavior_caps_word {
			continue-list = <
				UNDERSCORE MINUS
				BACKSPACE DELETE
				N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
			>;
		};
	};


    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
		y_o_u: y_o_u {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap &kp Y &kp O &kp U>
				;
		};
        v_e_r: v_e_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp V &kp E &kp R>
                ;
        };
        v_e: v_e {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp V &kp E>
                ;
        };
		cap_y_o_u: cap_y_o_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LS(Y)>
                , <&kp O>
                , <&kp U>
                ;
        };

		muc_you: macro_uc_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings
                = <&kp LS(Y)>
                , <&kp O>
                , <&kp U>
                ;
        };

        mlc_you: macro_lc_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings
                = <&kp Y>
                , <&kp O>
                , <&kp U>
                ;
        };
   };
	
	//
	// |------------------------|------------------------|
	// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
	// |                        |                        |
	// |  0  1  2  3  4         |          5  6  7  8  9 |
	// | 10 11 12 13 14         |         15 16 17 18 19 |
	// | 20 21 22 23 24         |         25 26 27 28 29 |
	// |	       30 31 32     |  33 34 35              |
	// |------------------------|------------------------|
	//
	
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_find {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LC(F)>;
        };
        combo_findfiles {
            timeout-ms = <50>;
            key-positions = <1 2 3>;
            bindings = <&kp LC(LS(F))>;
        };
		combo_lctl {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&sk LCTRL>;
        };
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&sk LALT>;
        };
        combo_lcalt {
            timeout-ms = <50>;
            key-positions = <20 21 22>;
            bindings = <&sk LC(LALT)>;
        };
		combo_rctl {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&sk RCTRL>;
        };
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&sk RALT>;
        }; 
        combo_rcalt {
            timeout-ms = <50>;
            key-positions = <27 28 29>;
            bindings = <&sk RC(RALT)>;
        };
		combo_lgui {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&sk LGUI>;
        };
        combo_rgui {
            timeout-ms = <50>;
            key-positions = <34 35>;
            bindings = <&sk RGUI>;
        };
        combo_app1 {
            timeout-ms = <50>;
            key-positions = <30 32>;
            bindings = <&kp K_APP>;
        };
        combo_app2 {
            timeout-ms = <50>;
            key-positions = <33 35>;
            bindings = <&kp K_APP>;
        };
        combo_YOU {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&mm_you>;
            layers = <0>;
        };
        combo_ver {
		    layers = <0>;
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&v_e_r>;
        };		
        combo_ver2 {
		    layers = <0>;
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&v_e_r>;
        };		 
        combo_ver3 {
		    layers = <0>;
            timeout-ms = <50>;
            key-positions = <17 27>;
            bindings = <&v_e>;
        };	
	};


    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│  Q       │  W       │  F       │  P       │  V       │   │  J       │  L       │  U       │  Y       │  P       │
 &homey_left LGUI Q  &homey_lt LAYER_KMOUSE W  &homey_lt LAYER_FN F  &kp P  &kp V       &kp J     &kp L       &kp U   &kp Y     &kp SEMI
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  A       │  R       │  S       │  T       │  G       │   │  M       │  N       │  E       │  I       │ O        │
            HRML(A,        R,         S,         T)     &kp G          &kp M  HRMR(N,       E,         I,        O)
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  Z       │  X       │  C       │  D       │  B       │   │   K      │  H       │ , <      │ . >      │ / ?      │
        &kp Z  &homey_lt LAYER_SYS X	&kp C      &kp D      &kp B          &kp K    &kp H      &kp COMMA  &homey_rt LAYER_SYS DOT  &kp SQT
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
      &kp TAB   &lmt LAYER_SWITCHES 0   &backspace LAYER_NAV BSPC  &backspace LAYER_NAV LC(BSPC)    &homey_right RSHFT ENTER    &thumb LAYER_NAV SPACE    &thumb LAYER_SYM SPACE   &kp LGUI

        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
		// Don't try and put shift and space on the same key. You often need to shift after a space.
			>;   
			
           sensor-bindings = <&scroll_encoder	 &scroll_encoder >;    

	   };

        default_layer_ctl_backspace {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
           &trans      &trans     &trans     &trans     &trans         &trans      &trans     &trans     &trans     &trans      
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
           &trans      &trans     &trans     &trans     &trans         &trans      &trans     &trans     &trans     &trans      
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
           &trans      &trans     &trans     &trans     &trans         &trans      &trans     &trans     &trans     &trans      
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
   &trans &trans &backspace LAYER_NAV LC(BSPC) &backspace LAYER_NAV BSPC  &trans      &trans     &trans     &trans

        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
			>;   
	   };

        nav_layer {
            bindings = <	
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            &kp ESC    &kp ENTER  &kp BSPC   &kp SPACE  &kp DEL        &kp ESC    &kp HOME   &kp UARW   &kp END    &kp PG_UP
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            &kp LALT   &kp LCTRL  &kp LSHFT  &kp TAB    &kp LC(S)      &kp LARW   &kp LARW   &kp DARW   &kp RARW   &kp PG_DN
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            &kp LC(Z)  &kp LC(X)  &kp LC(C) &kp LC(V)  &kp LC(V)      &kp LGUI   &kp K_APP  &mkp MB4   &mkp MB5  &kp ENTER
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                    &trans     &trans            &trans    &kp TAB        &kp TAB    &trans    &trans  &trans 

        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
			 
		
		sym_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│ `        │  ~       │  #       │  &       │ |        │   │  ^       │  {       │  }       │  [       │ ]        │
            &kp GRAVE  &kp TILDE  &kp HASH   &kp AMPS   &kp PIPE       &kp CARET  &kp LBRC   &kp RBRC   &kp LBKT   &kp RBKT
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  !       │  _       │  :       │  =       │  $       │   │  @       │  (       │  )       │  _       │  ;       │
           &kp EXCL   &kp UNDER   &kp COLON  &kp EQUAL  &kp DLLR       &kp AT     &kp LPAR   &kp RPAR   &kp UNDER  &kp SEMI
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│ %        │  ?       │ *        │ +        │ \        │   │ /        │  -       │  <       │  >       │ "        │
            &kp PRCNT  &kp QMARK &kp STAR    &kp PLUS  &kp BSLH       &kp SLASH &kp MINUS  &kp LT    &kp GT      &kp DQT
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                        &trans      &trans        &trans    &kp SQT         &trans     &trans     &trans  &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯   		
		    >;
        };

		noop_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│ RESET    │          │          │          │PROFILE 0 │   │          │          │          │          │  RESET   │
           &sys_reset  &kp X     &kp X     &kp X    &bt BT_SEL 0      &kp X     &kp X     &kp X     &bootloader   &sys_reset
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│BOOTLOADER│          │          │          │PROFILE 1 │   │          │          │          │          │BOOTLOADER│
          &bootloader  &kp X     &kp X     &kp X    &bt BT_SEL 1       &kp X     &kp X     &kp X     &kp X    &bootloader
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│          │          │          │ CLEAR BT │PROFILE 2 │   │          │          │          │          │          │
            &kp X     &kp X     &bt BT_CLR_ALL    &bt BT_CLR &bt    BT_SEL 2    &bt BT_CLR_ALL    &kp X     &kp X     &kp X     &kp X
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                     &trans          &trans        &trans     &trans         &trans     &trans     &bootloader  &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯

            >;
        };

        system_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│ RESET    │          │          │          │PROFILE 0 │   │          │          │          │          │  RESET   │
           &sys_reset  &kp X     &kp X     &kp X    &bt BT_SEL 0      &kp X     &kp X     &kp X     &bootloader    &sys_reset
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│BOOTLOADER│          │          │          │PROFILE 1 │   │          │          │          │          │BOOTLOADER│
          &bootloader  &kp X     &kp X     &kp X    &bt BT_SEL 1       &kp X     &kp X     &kp X     &kp X    &bootloader
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│          │          │          │ CLEAR BT │PROFILE 2 │   │          │          │          │          │          │
            &kp X     &kp X     &bt BT_CLR_ALL    &bt BT_CLR &bt    BT_SEL 2    &bt BT_CLR_ALL    &kp X     &kp X     &kp X     &kp X
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                     &trans          &trans        &trans     &trans         &trans     &trans     &bootloader  &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
		
		num_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│ INSERT   │  1       │  2       │  3       │          │   │ HOME     │ PAGE DN  │ PAGE UP  │ END      │  :       │
            &trans     &kp N7     &kp N8     &kp N9	    &trans         &kp STAR   &kp N7     &kp N8     &kp N9     &kp MINUS
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│ DELETE   │  4       │  5       │  6       │          │   │ LEFT     │ DOWN     │ UP       │ RIGHT    │  ;       │
            &kp N0     &kp N1     &kp N2     &kp N3    &kp EQUAL	  &kp DOT    &kp N4     &kp N5     &kp N6     &kp N0
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│ CAPS     │  7       │  8       │  9       │  0       │   │          │          │          │          │          │
            &trans     &trans     &kp DOT    &kp N0     &kp EQUAL      &kp SLASH  &kp N1     &kp N2     &kp N3     &kp PLUS
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                            &trans   &trans    &trans    &trans    &trans   &trans  &kp N0 &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯

            >;
        };

		fn_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│ CALC     │  F1      │  F2      │  F3      │ F10      │   │ HOME     │ F7       │ F8       │ F9       │ F10      │
            &kp K_CALC &kp F1     &kp F2     &kp F3     &kp F10        &kp SLASH  &kp F7     &kp F8     &kp F9     &kp F10
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│ CTL F11  │  F4      │  F5      │  F6      │ F11      │   │ LEFT     │ F4       │ F5       │ F6       │ F11      │
            &kp LC(F11) &kp F4    &kp F5     &kp F6     &kp F11        &kp LC(F11)  &kp F4   &kp F5     &kp F6     &kp F11
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│ 0        │  F7      │  F8      │  F9      │ F12      │   │ CTL ,    │ F1       │ F2       │ F3       │ F12      │
            &kp N0     &kp F7     &kp F8     &kp F9     &kp F12        &kp LC(COMMA)  &kp F1  &kp F2    &kp F3     &kp F12
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                        &trans       &trans        &trans     &trans         &trans     &trans     &trans  &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

		kmouse_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            &kp K_CALC &kp F1     &kp F2     &kp F3     &kp F10        &kp SLASH  &mmv MOVE_LEFT   &mmv MOVE_UP     &mmv MOVE_RIGHT    &msc SCRL_UP
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            &kp LC(F11) &kp F4    &kp F5     &kp F6     &kp F11        &kp LC(F11)  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &msc SCRL_DOWN
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            &kp N0     &kp F7     &kp F8     &kp F9     &kp F12        &mkp MB1   &mkp MB2    &mkp MB3  &mkp MB4   &mkp MB5
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴─────────┴──────────╯
                     &trans     &trans        &trans     &trans			&mkp MB1  &mkp MB3   &trans  &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯ 
            >;
           sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
		   	   };

        switches_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
      &to LAYER_BASE  &tog LAYER_KMOUSE  &tog LAYER_FN     &trans     &trans         &kp KP_NUM  &kp SLCK &kp PSCRN  &kp PAUSE_BREAK  &kp SYSREQ
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
      &tog LAYER_NUM    &tog LAYER_SYM     &caps_word  &kp CAPSLOCK &kp INSERT   &kp INSERT &kp CAPSLOCK  &caps_word  &tog LAYER_SYM  &tog LAYER_NUM
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
           &trans      &tog 3   &trans      &trans     &trans      &trans      &trans    &trans      &tog LAYER_NOOP   &trans
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                 &trans  &trans  &tog LAYER_NAV  &tog LAYER_BASE_BSPC    &trans    &tog LAYER_NAV     &trans  &trans

        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
			>;   
		   };
    };
};
